{
  "AWSTemplateFormatVersion" : "2010-09-09",
  "Description" : "Create AWS CloudFormation Customize Virtual Private Cloud",
  "Parameters" : {
    
    "EnvironmentTypeTag": {
      "Description" : "Please input EnvironmentType.",
      "Type": "String",
      "Default" : "Dev",
      "AllowedPattern" : "[-a-zA-Z]*",
      "ConstraintDescription" : ""
    },
    "ProjectTag": {
      "Description" : "Please input Project name.",
      "Type": "String",
      "Default" : "Sample",
      "AllowedPattern" : "[-a-zA-Z0-9]*",
      "ConstraintDescription" : ""
    },

    "VpcCidrBlock" : {
      "Type" : "String",
      "Description" : "Please input an IP range in VPC.",
      "Default" : "10.0.0.0/16",
      "AllowedPattern": "(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})/(\\d{1,2})",
      "ConstraintDescription": ""
    },
    
    "PublicSubnetCidrBlockAzC" : {
      "Type" : "String",
      "Description" : "Please input an IP range in example-vpc-public-subnet-c.",
      "Default" : "10.0.0.0/24",
      "AllowedPattern": "(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})/(\\d{1,2})",
      "ConstraintDescription": ""
    },

    "PublicSubnetCidrBlockAzD" : {
      "Type" : "String",
      "Description" : "Please input an IP range in example-vpc-public-subnet-d.",
      "Default" : "10.0.1.0/24",
      "AllowedPattern": "(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})/(\\d{1,2})",
      "ConstraintDescription": ""
    },
    
    "PrivateSubnetCidrBlockAzC" : {
      "Type" : "String",
      "Description" : "Please input an IP range in example-vpc-private-subnet-c.",
      "Default" : "10.0.10.0/24",
      "AllowedPattern": "(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})/(\\d{1,2})",
      "ConstraintDescription": ""
    },

    "PrivateSubnetCidrBlockAzD" : {
      "Type" : "String",
      "Description" : "Please input an IP range in example-vpc-private-subnet-d.",
      "Default" : "10.0.11.0/24",
      "AllowedPattern": "(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})/(\\d{1,2})",
      "ConstraintDescription": ""
    },
    
    "NatGatewayCidrBlock" : {
      "Type" : "String",
      "Description" : "Please input an IP range in example-vpc-public-subnet-d.",
      "Default" : "10.0.255.0/24",
      "AllowedPattern": "(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})/(\\d{1,2})",
      "ConstraintDescription": ""
    },
    
    "EC2InstanceType" : {
      "Description" : "EC2 instance type",
      "Type" : "String",
      "Default" : "t2.nano",
      "AllowedValues" : [ "t2.nano","t2.micro","t2.small","t2.medium","t2.large","t2.xlarge","t2.2xlarge","m4.large","m4.xlarge","m3.medium","m3.large","m3.xlarge","c4.large","c4.xlarge","c3.large","c3.xlarge","r4.large","r4.xlarge"],
      "ConstraintDescription" : "must be a valid EC2 instance type."
     },
     
     "AmiId" : {
      "Description" : "EC2 instance AMI ID",
      "Type" : "String",
      "Default" : "ami-xxxxxxxx",
      "AllowedPattern" : "[-_ a-zA-Z0-9]*",
      "ConstraintDescription" : "can contain only ASCII characters."
     },
     
    "KeyName": {
      "Description" : "Name of an existing EC2 KeyPair to enable SSH access to the instance",
      "Type": "String",
      "MinLength": "1",
      "MaxLength": "255",
      "Default": "Sample_Key",
      "AllowedPattern" : "[-_a-zA-Z0-9]*",
      "ConstraintDescription" : "can contain only ASCII characters."
    },
    
    "MyLocation" : {
      "Description" : " The IP address range that can be used to SSH and HTTP/HTTPS to the ELB and the EC2 instances",
      "Type": "String",
      "MinLength": "9",
      "MaxLength": "18",
      "Default": "10.255.0.0/16",
      "AllowedPattern": "(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})/(\\d{1,2})",
      "ConstraintDescription": "must be a valid IP CIDR range of the form x.x.x.x/x."
    },
    
    "Sns" : {
      "Description" : " Name of Sns ",
      "Type": "String",
      "Default": "SampleTopic"
    },
    
    "S3LogBucketName": {
      "Description" : "Please input S3 Bucket(logs) name.",
      "Type": "String",
      "Default" : "sample-dev-logs"
    },
    
    "CertificateNum" : {
      "Description" : " SSL Certificate Number",
      "Type": "String",
      "Default": "nnnnnnnn-nnnn-nnnn-nnnn-nnnnnnnnnnnn"
    },
    
    "AlartMailAddress" : {
      "Description" : " Email address from alart",
      "Type": "String",
      "Default": "sample@xxxx.co.jp"
    }
    
  },

  "Mappings" : {},

  "Resources" : {
    
    "VPC" : {
      "Type" : "AWS::EC2::VPC",
      "Properties" : {
        "CidrBlock" : { "Ref" : "VpcCidrBlock" },
        "EnableDnsSupport" : "true",
        "EnableDnsHostnames" : "true",
        "Tags" : [
          { "Key" : "Name", "Value" : { "Fn::Join": [ "_", [  { "Ref" : "ProjectTag" }, { "Ref" : "EnvironmentTypeTag" }, "VPC"]]} },
          { "Key" : "EnvironmentType", "Value" : { "Ref" : "EnvironmentTypeTag" } },
          { "Key" : "Project", "Value" : { "Ref" : "ProjectTag" } }
        ]
      }
    },
    
    "InternetGateway" : {
      "Type" : "AWS::EC2::InternetGateway",
      "Properties" : {
        "Tags" : [
          { "Key" : "Name", "Value" : { "Fn::Join": [ " ", [  { "Ref" : "ProjectTag" }, { "Ref" : "EnvironmentTypeTag" }, "InternetGateway"]]} },
          { "Key" : "EnvironmentType", "Value" : { "Ref" : "EnvironmentTypeTag" } },
          { "Key" : "Project", "Value" : { "Ref" : "ProjectTag" } }
        ]
      }
    },
    
    "GatewayToInternet" : {
       "Type" : "AWS::EC2::VPCGatewayAttachment",
       "Properties" : {
         "VpcId" : { "Ref" : "VPC" },
         "InternetGatewayId" : { "Ref" : "InternetGateway" }
       }
    },

    "NatGateway" : {
      "Type" : "AWS::EC2::NatGateway",
      "DependsOn" : 
        [
          "NatGatewayEIP",
          "PublicSubnetForNatGateway"
        ],
      "Properties" : {
        "AllocationId" : { "Fn::GetAtt" : ["NatGatewayEIP", "AllocationId"] },
        "SubnetId" : { "Ref" : "PublicSubnetForNatGateway" }
      }
    },
    
    "NatGatewayEIP" : {
      "Type" : "AWS::EC2::EIP",
      "Properties" : {
        "Domain" : "vpc"
      }
    },
    
    "PublicRouteTable" : {
      "Type" : "AWS::EC2::RouteTable",
      "Properties" : {
        "VpcId" : { "Ref" : "VPC" },
        "Tags" : [
          { "Key" : "Name", "Value" : { "Fn::Join": [ " ", [ { "Ref" : "ProjectTag" }, { "Ref" : "EnvironmentTypeTag" }, "Public"]]} },
          { "Key" : "EnvironmentType", "Value" : { "Ref" : "EnvironmentTypeTag" } },
          { "Key" : "Project", "Value" : { "Ref" : "ProjectTag" } }
        ]
      }
    },
    
    "PrivateRouteTable" : {
      "Type" : "AWS::EC2::RouteTable",
      "Properties" : {
        "VpcId" : { "Ref" : "VPC" },
        "Tags" : [
          { "Key" : "Name", "Value" : { "Fn::Join": [ " ", [ { "Ref" : "ProjectTag" }, { "Ref" : "EnvironmentTypeTag" }, "Private" ]]} },
          { "Key" : "EnvironmentType", "Value" : { "Ref" : "EnvironmentTypeTag" } },
          { "Key" : "Project", "Value" : { "Ref" : "ProjectTag" } }
        ]
      }
    },

    "PublicRoute" : {
      "Type" : "AWS::EC2::Route",
      "DependsOn" : "GatewayToInternet",
      "Properties" : {
        "RouteTableId" : { "Ref" : "PublicRouteTable" },
        "DestinationCidrBlock" : "0.0.0.0/0",
        "GatewayId" : { "Ref" : "InternetGateway" }
      }
    },

    "PrivateNatGatewayRoute" : {
      "Type" : "AWS::EC2::Route",
      "DependsOn" : "NatGateway",
      "Properties" : {
        "RouteTableId" : { "Ref" : "PrivateRouteTable" },
        "DestinationCidrBlock" : "0.0.0.0/0",
        "NatGatewayId" : { "Ref" : "NatGateway" }
      }
    },

    "NetworkAcl" : {
      "Type" : "AWS::EC2::NetworkAcl",
      "Properties" : {
        "VpcId" : { "Ref" : "VPC" },
        "Tags" : [
          { "Key" : "Name", "Value" : { "Fn::Join": [ "-", [  { "Ref" : "ProjectTag" }, { "Ref" : "EnvironmentTypeTag" }, "NetworkAcl" ]]} },
          { "Key" : "EnvironmentType", "Value" : { "Ref" : "EnvironmentTypeTag" } },
          { "Key" : "Project", "Value" : { "Ref" : "ProjectTag" } }
        ]
      }
    },
    
    "NetworkAclEntrySendAllowIpv4" : {
      "Type" : "AWS::EC2::NetworkAclEntry",
      "Properties" : {
        "NetworkAclId" : { "Ref" : "NetworkAcl" },
        "CidrBlock": "0.0.0.0/0",
        "RuleNumber": 100,
        "Protocol": "-1",
        "Egress": true,
        "RuleAction": "allow"
      }
    },
    
    "NetworkAclEntryReceiveAllowIpv4" : {
      "Type" : "AWS::EC2::NetworkAclEntry",
      "Properties" : {
        "NetworkAclId" : { "Ref" : "NetworkAcl" },
        "CidrBlock": "0.0.0.0/0",
        "RuleNumber": 100,
        "Protocol": "-1",
        "Egress": false,
        "RuleAction": "allow"
      }
    },

    "PublicSubnetAzC" : {
       "Type" : "AWS::EC2::Subnet",
       "Properties" : {
          "VpcId" : { "Ref" : "VPC" },
          "AvailabilityZone" : "ap-northeast-1c",
          "CidrBlock" : { "Ref" : "PublicSubnetCidrBlockAzC" },
          "MapPublicIpOnLaunch" : false,
          "Tags" : [
            { "Key" : "Name", "Value" : { "Fn::Join": [ " ", [  { "Ref" : "ProjectTag" }, { "Ref" : "EnvironmentTypeTag" }, "Public", "C"]]} },
            { "Key" : "EnvironmentType", "Value" : { "Ref" : "EnvironmentTypeTag" } },
            { "Key" : "Project", "Value" : { "Ref" : "ProjectTag" } }
          ]
       }
    },
    
    "PublicSubnetAzD" : {
       "Type" : "AWS::EC2::Subnet",
       "Properties" : {
          "VpcId" : { "Ref" : "VPC" },
          "AvailabilityZone" : "ap-northeast-1d",
          "CidrBlock" : { "Ref" : "PublicSubnetCidrBlockAzD" },
          "MapPublicIpOnLaunch" : false,
          "Tags" : [
            { "Key" : "Name", "Value" : { "Fn::Join": [ " ", [  { "Ref" : "ProjectTag" }, { "Ref" : "EnvironmentTypeTag" }, "Public", "D"]]} },
            
            
            { "Key" : "EnvironmentType", "Value" : { "Ref" : "EnvironmentTypeTag" } },
            { "Key" : "Project", "Value" : { "Ref" : "ProjectTag" } }
          ]
       }
    },

    "PrivateSubnetAzC" : {
       "Type" : "AWS::EC2::Subnet",
       "Properties" : {
          "VpcId" : { "Ref" : "VPC" },
          "AvailabilityZone" : "ap-northeast-1c",
          "CidrBlock" : { "Ref" : "PrivateSubnetCidrBlockAzC" },
          "MapPublicIpOnLaunch" : false,
          "Tags" : [
            { "Key" : "Name", "Value" : { "Fn::Join": [ " ", [  { "Ref" : "ProjectTag" }, { "Ref" : "EnvironmentTypeTag" }, "Private", "C"]]} },
            { "Key" : "EnvironmentType", "Value" : { "Ref" : "EnvironmentTypeTag" } },
            { "Key" : "Project", "Value" : { "Ref" : "ProjectTag" } }
          ]
       }
    },
    
    "PrivateSubnetAzD" : {
       "Type" : "AWS::EC2::Subnet",
       "Properties" : {
          "VpcId" : { "Ref" : "VPC" },
          "AvailabilityZone" : "ap-northeast-1d",
          "CidrBlock" : { "Ref" : "PrivateSubnetCidrBlockAzD" },
          "MapPublicIpOnLaunch" : false,
          "Tags" : [
            { "Key" : "Name", "Value" : { "Fn::Join": [ " ", [  { "Ref" : "ProjectTag" }, { "Ref" : "EnvironmentTypeTag" }, "Private", "D"]]} },
            { "Key" : "EnvironmentType", "Value" : { "Ref" : "EnvironmentTypeTag" } },
            { "Key" : "Project", "Value" : { "Ref" : "ProjectTag" } }
            
          ]
       }
    },
    
    "PublicSubnetForNatGateway" : {
       "Type" : "AWS::EC2::Subnet",
       "Properties" : {
          "VpcId" : { "Ref" : "VPC" },
          "AvailabilityZone" : "ap-northeast-1d",
          "CidrBlock" : { "Ref" : "NatGatewayCidrBlock" },
          "MapPublicIpOnLaunch" : false,
          "Tags" : [
            { "Key" : "Name", "Value" : { "Fn::Join": [ " ", [ { "Ref" : "ProjectTag" }, { "Ref" : "EnvironmentTypeTag" }, "NatGateway"]]} },
            { "Key" : "EnvironmentType", "Value" : { "Ref" : "EnvironmentTypeTag" } },
            { "Key" : "Project", "Value" : { "Ref" : "ProjectTag" } }
          ]
       }
    },

    "PrivateSubnetRouteTableAssociatioForAzC" : {
      "Type" : "AWS::EC2::SubnetRouteTableAssociation",
      "Properties" : {
        "SubnetId" : { "Ref" : "PrivateSubnetAzC" },
        "RouteTableId" : { "Ref" : "PrivateRouteTable" }
      }
    },
    "PrivateSubnetRouteTableAssociationForAzD" : {
      "Type" : "AWS::EC2::SubnetRouteTableAssociation",
      "Properties" : {
        "SubnetId" : { "Ref" : "PrivateSubnetAzD" },
        "RouteTableId" : { "Ref" : "PrivateRouteTable" }
      }
    },
    
    "PublicSubnetRouteTableAssociationForAzC" : {
      "Type" : "AWS::EC2::SubnetRouteTableAssociation",
      "Properties" : {
        "SubnetId" : { "Ref" : "PublicSubnetAzC" },
        "RouteTableId" : { "Ref" : "PublicRouteTable" }
      }
    },
    
    "PublicSubnetRouteTableAssociationForAzD" : {
      "Type" : "AWS::EC2::SubnetRouteTableAssociation",
      "Properties" : {
        "SubnetId" : { "Ref" : "PublicSubnetAzD" },
        "RouteTableId" : { "Ref" : "PublicRouteTable" }
      }
    },
    
    "PublicSubnetRouteTableAssociationNatGateway" : {
      "Type" : "AWS::EC2::SubnetRouteTableAssociation",
      "Properties" : {
        "SubnetId" : { "Ref" : "PublicSubnetForNatGateway" },
        "RouteTableId" : { "Ref" : "PublicRouteTable" }
      }
    },

    "PrivateSubnetNetworkAclAssociatioForAzC" : {
      "Type" : "AWS::EC2::SubnetNetworkAclAssociation",
      "Properties" : {
        "SubnetId" : { "Ref" : "PrivateSubnetAzC" },
        "NetworkAclId" : { "Ref" : "NetworkAcl" }
      }
    },
    "PrivateSubnetNetworkAclAssociatioForAzD" : {
      "Type" : "AWS::EC2::SubnetNetworkAclAssociation",
      "Properties" : {
        "SubnetId" : { "Ref" : "PrivateSubnetAzD" },
        "NetworkAclId" : { "Ref" : "NetworkAcl" }
      }
    },

    "PublicSubnetNetworkAclAssociationForAzC" : {
      "Type" : "AWS::EC2::SubnetNetworkAclAssociation",
      "Properties" : {
        "SubnetId" : { "Ref" : "PublicSubnetAzC" },
        "NetworkAclId" : { "Ref" : "NetworkAcl" }
      }
    },

    "PublicSubnetNetworkAclAssociationForAzD" : {
      "Type" : "AWS::EC2::SubnetNetworkAclAssociation",
      "Properties" : {
        "SubnetId" : { "Ref" : "PublicSubnetAzD" },
        "NetworkAclId" : { "Ref" : "NetworkAcl" }
      }
    },

    "PublicSubnetNetworkAclAssociationNatGateway" : {
      "Type" : "AWS::EC2::SubnetNetworkAclAssociation",
      "Properties" : {
        "SubnetId" : { "Ref" : "PublicSubnetForNatGateway" },
        "NetworkAclId" : { "Ref" : "NetworkAcl" }
      }
    },
    
    "SecurityGroupForELB" : {
      "Type" : "AWS::EC2::SecurityGroup",
      "Properties" : {
        "VpcId" : { "Ref" : "VPC" },
        "GroupName" : { "Fn::Join": [ "_", [  { "Ref" : "ProjectTag" }, { "Ref" : "EnvironmentTypeTag" }, "for", "ELB"]]},
        "GroupDescription" : "Enable HTTP/HTTPS access via port 80/443",
        "SecurityGroupIngress" : [
          { "IpProtocol" : "tcp", "FromPort" : "80", "ToPort" : "80", "CidrIp" : "0.0.0.0/0" },
          { "IpProtocol" : "tcp", "FromPort" : "443", "ToPort" : "443", "CidrIp" : "0.0.0.0/0" }
        ],
        "Tags" :  [
          { "Key" : "Name", "Value" : { "Fn::Join": [ " ", [ { "Ref" : "ProjectTag" }, { "Ref" : "EnvironmentTypeTag" }, "ELB"]]} },
          { "Key" : "EnvironmentType", "Value" : { "Ref" : "EnvironmentTypeTag" } },
          { "Key" : "Project", "Value" : { "Ref" : "ProjectTag" } }
        ]
      }
    },

    "SecurityGroupEgressToEC2UsingHTTP" : {
      "Type" : "AWS::EC2::SecurityGroupEgress",
      "DependsOn" : [
        "SecurityGroupForELB",
        "SecurityGroupForEC2"
      ],
      "Properties" : {
        "GroupId" : { "Ref" : "SecurityGroupForELB" },
        "IpProtocol" : "tcp",
        "FromPort" : "80",
        "ToPort" : "80",
        "DestinationSecurityGroupId" : { "Ref" : "SecurityGroupForEC2"}
      }
    },

    "SecurityGroupForEC2" : {
      "Type" : "AWS::EC2::SecurityGroup",
      "DependsOn" : "SecurityGroupForELB",
      "Properties" : {
        "VpcId" : { "Ref" : "VPC" },
        "GroupName" : { "Fn::Join": [ "_", [  { "Ref" : "ProjectTag" }, { "Ref" : "EnvironmentTypeTag" }, "for", "EC2"]]},
        "GroupDescription" : "Enable SSH access via port 22 and Enable HTTP access from ELB via port 80",
        "SecurityGroupIngress" : [
          { "IpProtocol" : "tcp", "FromPort" : "22", "ToPort" : "22", "CidrIp" : { "Ref" : "MyLocation"} },
          { "IpProtocol" : "tcp", "FromPort" : "80", "ToPort" : "80", "SourceSecurityGroupId" : { "Ref" : "SecurityGroupForELB"} }
        ],
        "Tags" :  [
          { "Key" : "Name", "Value" : { "Fn::Join": [ " ", [ { "Ref" : "ProjectTag" }, { "Ref" : "EnvironmentTypeTag" }, "EC2"]]} },
          { "Key" : "EnvironmentType", "Value" : { "Ref" : "EnvironmentTypeTag" } },
          { "Key" : "Project", "Value" : { "Ref" : "ProjectTag" } }
        ]
      }
    },
    
    "SecurityGroupIngressFromEC2" : {
      "Type" : "AWS::EC2::SecurityGroupIngress",
      "DependsOn" : [
        "SecurityGroupForEC2"
      ],
      "Properties" : {
        "GroupId" : { "Ref" : "SecurityGroupForEC2" },
        "IpProtocol" : "tcp",
        "FromPort" : "22",
        "ToPort" : "22",
        "SourceSecurityGroupId" : { "Ref" : "SecurityGroupForEC2"}
      }
    },

    "AlbHttpTarget" : {
      "Type" : "AWS::ElasticLoadBalancingV2::TargetGroup",
      "DependsOn" : [
        "VPC",
        "EC2Public1",
        "EC2Public2"
      ],
      "Properties" : {
        "HealthCheckIntervalSeconds" : "30",
        "HealthCheckPort" : "80",
        "HealthCheckProtocol" : "HTTP",
        "HealthCheckTimeoutSeconds" : "5",
        "HealthyThresholdCount" : "5",
        "Matcher" : { "HttpCode" : "200" },
        "Name" : { "Fn::Join" : [ "-", [{ "Ref" : "ProjectTag" }, { "Ref" : "EnvironmentTypeTag" }, "HTTP", "ALBTarget"]]},
        "Port" : "80",
        "Protocol" : "HTTP",
        "Tags" :  [
          { "Key" : "Name", "Value" : { "Fn::Join": [ " ", [ { "Ref" : "ProjectTag" }, { "Ref" : "EnvironmentTypeTag" }, "HTTP", "Target"]]} },
          { "Key" : "EnvironmentType", "Value" : { "Ref" : "EnvironmentTypeTag" } },
          { "Key" : "Project", "Value" : { "Ref" : "ProjectTag" } }
        ],
        "TargetGroupAttributes" : [
          { "Key" : "deregistration_delay.timeout_seconds", "Value" : "300" },
          { "Key" : "stickiness.enabled", "Value" : "false" },
          { "Key" : "stickiness.type", "Value" : "lb_cookie" },
          { "Key" : "stickiness.lb_cookie.duration_seconds", "Value" : "86400" }
        ],
        "Targets" : [
          { "Id" : { "Ref" : "EC2Public1" }, "Port" : "80" },
          { "Id" : { "Ref" : "EC2Public2" }, "Port" : "80" }
        ],
        "UnhealthyThresholdCount" : "3",
        "VpcId" : { "Ref": "VPC" }
      }
    },

    "ALB" : {
      "Type" : "AWS::ElasticLoadBalancingV2::LoadBalancer",
      "DependsOn" : [
        "VPC",
        "S3LogsBucket",
        "S3LogsBucketPolicy"
      ],
      "Properties" : {
        "LoadBalancerAttributes" : [
          { "Key" : "access_logs.s3.enabled", "Value" : "true" },
          { "Key" : "access_logs.s3.bucket", "Value" : { "Ref" : "S3LogsBucket" } },
          { "Key" : "access_logs.s3.prefix", "Value" : "alb-logs" },
          { "Key" : "deletion_protection.enabled", "Value" : "false" },
          { "Key" : "idle_timeout.timeout_seconds", "Value" : "60" }
        ],
        "Name" : { "Fn::Join" : [ "-", [{ "Ref" : "ProjectTag" }, { "Ref" : "EnvironmentTypeTag" }, "ALB"]]},
        "Scheme" : "internal",
        "SecurityGroups" : [
          { "Ref": "SecurityGroupForELB" }
        ],
        "Subnets" : [
          { "Ref": "PublicSubnetAzC" },
          { "Ref": "PublicSubnetAzD" }
        ],
        "Tags" :  [
          { "Key" : "Name", "Value" : { "Fn::Join": [ " ", [ { "Ref" : "ProjectTag" }, { "Ref" : "EnvironmentTypeTag" }, "ALB"]]} },
          { "Key" : "EnvironmentType", "Value" : { "Ref" : "EnvironmentTypeTag" } },
          { "Key" : "Project", "Value" : { "Ref" : "ProjectTag" } }
        ]
      }
    },
    "ALBHttpListener" : {
      "Type" : "AWS::ElasticLoadBalancingV2::Listener",
      "DependsOn" : [
        "AlbHttpTarget",
        "ALB"
      ],
      "Properties" : {
        "DefaultActions" : [{
          "TargetGroupArn" : { "Ref" : "AlbHttpTarget" },
          "Type" : "forward"
        }],
        "LoadBalancerArn" : { "Ref" : "ALB" },
        "Port" : "80",
        "Protocol" : "HTTP"
      }
    },
    "ALBHttpsListener" : {
      "Type" : "AWS::ElasticLoadBalancingV2::Listener",
      "DependsOn" : [
        "AlbHttpTarget",
        "ALB"
      ],
      "Properties" : {
        "Certificates" : [
          { "CertificateArn" : { "Fn::Join": [ "", [ {"Fn::Sub": "arn:aws:acm:${AWS::Region}:${AWS::AccountId}:certificate/"}, { "Ref" : "CertificateNum" }]]} }
        ],
        "DefaultActions" : [{
          "TargetGroupArn" : { "Ref" : "AlbHttpTarget" },
          "Type" : "forward"
        }],
        "LoadBalancerArn" : { "Ref" : "ALB" },
        "Port" : "443",
        "Protocol" : "HTTPS"
      }
    },
    
    "AlarmStatusChkALBHttp" : {
      "Type" : "AWS::CloudWatch::Alarm",
      "DependsOn" : [
        "ALB",
        "SNSTopic"
      ],
      "Properties" : {
        "ActionsEnabled": "true",
        "AlarmName" : { "Fn::Join": [ " ", [ "StatusChk", "Alarm", { "Ref" : "ProjectTag" }, { "Ref" : "EnvironmentTypeTag" }, "HTTP", "ALBTarget"]]},
        "AlarmDescription" : { "Fn::Join": [ " ", [ "StatusChk", "Alarm", { "Ref" : "ProjectTag" }, { "Ref" : "EnvironmentTypeTag" }, "HTTP", "ALBTarget"]]},
        "AlarmActions" : [ { "Ref" : "SNSTopic" } ],
        "MetricName" : "HealthyHostCount",
        "Namespace" : "AWS/ApplicationELB",
        "Period" : "300",
        "EvaluationPeriods" : "1",
        "Threshold" : "0",
        "Statistic": "Average",
        "ComparisonOperator" : "LessThanOrEqualToThreshold",
        "Dimensions" : [
          {
            "Name" : "LoadBalancer",
            "Value" : { "Fn::GetAtt" : [ "ALB" , "LoadBalancerFullName" ] }
          },
          {
            "Name" : "TargetGroup",
            "Value" : { "Fn::GetAtt" : [ "AlbHttpTarget" , "TargetGroupFullName" ] }
          }
        ],
        "OKActions": [ { "Ref" : "SNSTopic" } ]
      }
    },

    "S3LogsBucket" : {
      "Type" : "AWS::S3::Bucket",
      "Properties" : {
        "BucketName": { "Ref" : "S3LogBucketName" },
        "LifecycleConfiguration": {
          "Rules" : [
            {
              "Id": { "Fn::Join": [ "-", [{ "Ref" : "ProjectTag" }, { "Ref" : "EnvironmentTypeTag" }, "alb", "logs", "life", "cycle"]] },
              "ExpirationInDays" : "5",
              "Transitions" : [
                {
                  "StorageClass" : "GLACIER",
                  "TransitionInDays" : "4"
                }
              ],
              "Prefix" : "alb-logs/AWSLogs/",
              "Status" : "Enabled"
            }
          ]
        },
        "Tags" :  [
          { "Key" : "Name", "Value" : { "Fn::Join": [ " ", [ { "Ref" : "ProjectTag" }, { "Ref" : "EnvironmentTypeTag" }, "logs"]]} },
          { "Key" : "EnvironmentType", "Value" : { "Ref" : "EnvironmentTypeTag" } },
          { "Key" : "Project", "Value" : { "Ref" : "ProjectTag" } }
        ]
      }
    },
    "S3LogsBucketPolicy" : {
      "Type" : "AWS::S3::BucketPolicy",
      "DependsOn" : "S3LogsBucket",
      "Properties" : {
        "Bucket" : { "Ref" : "S3LogsBucket" },
        "PolicyDocument" : {
          "Id": { "Fn::Join": [ "-", [ "Policy", { "Ref" : "ProjectTag" }, { "Ref" : "EnvironmentTypeTag" }, "logs"]]},
          "Statement": [
            {
              "Sid": { "Fn::Join": [ " ", [ "Policy", { "Ref" : "ProjectTag" }, { "Ref" : "EnvironmentTypeTag" }, "logs"]]},
              "Effect": "Allow",
              "Principal": {
                "AWS": "arn:aws:iam::582318560864:root"
              },
              "Action": "s3:PutObject",
              "Resource": [
                { "Fn::Join": [ "", [ "arn:aws:s3:::", { "Ref" : "S3LogBucketName" }, "/", "alb-logs", "/AWSLogs/", { "Ref" : "AWS::AccountId" },"/*"]] }
              ]
            }
          ]
        }
      }
    },

    "EC2Public1" : {
      "Type" : "AWS::EC2::Instance",
      "DependsOn" : [
        "VPC",
        "PublicSubnetAzC",
        "SecurityGroupForEC2"
      ],
      "Properties" : {
        "ImageId" : { "Ref" : "AmiId" },
        "SecurityGroupIds" : [{ "Ref" : "SecurityGroupForEC2" }],
        "SubnetId" : { "Ref" : "PublicSubnetAzC" },
        "InstanceType" : { "Ref" : "EC2InstanceType" },
        "KeyName" : { "Ref" : "KeyName" },
        "DisableApiTermination" : "false",
        "BlockDeviceMappings": [
          {
            "DeviceName" : "/dev/xvda",
            "Ebs" : {
              "VolumeSize" : "128",
              "VolumeType" : "standard",
              "DeleteOnTermination" : "true"
            }
          }
        ],
        "Tags" : [
          { "Key" : "Name", "Value" : { "Fn::Join": [ " ", [  { "Ref" : "ProjectTag" }, { "Ref" : "EnvironmentTypeTag" }, "Public", "c"]]} },
          { "Key" : "EnvironmentType", "Value" : { "Ref" : "EnvironmentTypeTag" } },
          { "Key" : "Project", "Value" : { "Ref" : "ProjectTag" } }
        ]
      }
    },

    "EC2Eip1" : {
      "Type" : "AWS::EC2::EIP",
      "DependsOn" : "EC2Public1",
      "Properties" : {
        "InstanceId" : { "Ref" : "EC2Public1" },
        "Domain" : "vpc"
      }
    },

    "EC2Public2" : {
      "Type" : "AWS::EC2::Instance",
      "DependsOn" : [
        "VPC",
        "PublicSubnetAzD",
        "SecurityGroupForEC2"
      ],
      "Properties" : {
        "ImageId" : { "Ref" : "AmiId" },
        "SecurityGroupIds" : [{ "Ref" : "SecurityGroupForEC2" }],
        "SubnetId" : { "Ref" : "PublicSubnetAzD" },
        "InstanceType" : { "Ref" : "EC2InstanceType" },
        "KeyName" : { "Ref" : "KeyName" },
        "DisableApiTermination" : "false",
        "BlockDeviceMappings": [
          {
            "DeviceName" : "/dev/xvda",
            "Ebs" : {
              "VolumeSize" : "128",
              "VolumeType" : "standard",
              "DeleteOnTermination" : "true"
            }
          }
        ],
        "Tags" : [
          { "Key" : "Name", "Value" : { "Fn::Join": [ " ", [  { "Ref" : "ProjectTag" }, { "Ref" : "EnvironmentTypeTag" }, "Public", "d"]]} },
          { "Key" : "EnvironmentType", "Value" : { "Ref" : "EnvironmentTypeTag" } },
          { "Key" : "Project", "Value" : { "Ref" : "ProjectTag" } }
        ]
      }
    },
    
    "EC2Eip2" : {
      "Type" : "AWS::EC2::EIP",
      "DependsOn" : "EC2Public2",
      "Properties" : {
        "InstanceId" : { "Ref" : "EC2Public2" },
        "Domain" : "vpc"
      }
    },
    
    "AlarmCPUEC2Public1" : {
      "Type" : "AWS::CloudWatch::Alarm",
      "DependsOn" : [ 
        "EC2Public1",
        "SNSTopic"
      ],
      "Properties" : {
        "ActionsEnabled": "true",
        "AlarmName" : { "Fn::Join": [ " ", [ "CPU", "Alarm",  { "Ref" : "ProjectTag" }, { "Ref" : "EnvironmentTypeTag" }, "Public", "c"]]},
        "AlarmDescription" : { "Fn::Join": [ " ", [ "CPU", "Alarm",  { "Ref" : "ProjectTag" }, { "Ref" : "EnvironmentTypeTag" }, "Public", "c"]]},
        "AlarmActions" : [ { "Ref" : "SNSTopic" } ],
        "MetricName" : "CPUUtilization",
        "Namespace" : "AWS/EC2",
        "Period" : "300",
        "EvaluationPeriods" : "1",
        "Threshold" : "80",
        "Statistic": "Average",
        "ComparisonOperator" : "GreaterThanOrEqualToThreshold",
        "Dimensions" : [ {
          "Name" : "InstanceId",
          "Value" : { "Ref" : "EC2Public1" }
        } ],
        "OKActions": [ { "Ref" : "SNSTopic" } ]
      }
    },

    "AlarmStatusChkEC2Public1" : {
      "Type" : "AWS::CloudWatch::Alarm",
      "DependsOn" : [ 
        "EC2Public1",
        "SNSTopic"
      ],
      "Properties" : {
        "ActionsEnabled": "true",
        "AlarmName" : { "Fn::Join": [ " ", [ "StatusChk", "Alarm",  { "Ref" : "ProjectTag" }, { "Ref" : "EnvironmentTypeTag" }, "Public", "c"]]},
        "AlarmDescription" : { "Fn::Join": [ " ", [ "StatusChk", "Alarm",  { "Ref" : "ProjectTag" }, { "Ref" : "EnvironmentTypeTag" }, "Public", "c"]]},
        "AlarmActions" : [ { "Ref" : "SNSTopic" } ],
        "MetricName" : "StatusCheckFailed",
        "Namespace" : "AWS/EC2",
        "Period" : "300",
        "EvaluationPeriods" : "1",
        "Threshold" : "1",
        "Statistic": "Maximum",
        "ComparisonOperator" : "GreaterThanOrEqualToThreshold",
        "Dimensions" : [ {
          "Name" : "InstanceId",
          "Value" : { "Ref" : "EC2Public1" }
        } ],
        "OKActions": [ { "Ref" : "SNSTopic" } ]
      }
    },

    "AlarmCPUEC2Public2" : {
      "Type" : "AWS::CloudWatch::Alarm",
      "DependsOn" : [ 
        "EC2Public2",
        "SNSTopic"
      ],
      "Properties" : {
        "ActionsEnabled": "true",
        "AlarmName" : { "Fn::Join": [ " ", [ "CPU", "Alarm",  { "Ref" : "ProjectTag" }, { "Ref" : "EnvironmentTypeTag" }, "Public", "d"]]},
        "AlarmDescription" : { "Fn::Join": [ " ", [ "CPU", "Alarm",  { "Ref" : "ProjectTag" }, { "Ref" : "EnvironmentTypeTag" }, "Public", "d"]]},
        "AlarmActions" : [ { "Ref" : "SNSTopic" } ],
        "MetricName" : "CPUUtilization",
        "Namespace" : "AWS/EC2",
        "Period" : "300",
        "EvaluationPeriods" : "1",
        "Threshold" : "80",
        "Statistic": "Average",
        "ComparisonOperator" : "GreaterThanOrEqualToThreshold",
        "Dimensions" : [ {
          "Name" : "InstanceId",
          "Value" : { "Ref" : "EC2Public1" }
        } ],
        "OKActions": [ { "Ref" : "SNSTopic" } ]
      }
    },

    "AlarmStatusChkEC2Public2" : {
      "Type" : "AWS::CloudWatch::Alarm",
      "DependsOn" : [ 
        "EC2Public2",
        "SNSTopic"
      ],
      "Properties" : {
        "ActionsEnabled": "true",
        "AlarmName" : { "Fn::Join": [ " ", [ "StatusChk", "Alarm",  { "Ref" : "ProjectTag" }, { "Ref" : "EnvironmentTypeTag" }, "Public", "d"]]},
        "AlarmDescription" : { "Fn::Join": [ " ", [ "StatusChk", "Alarm",  { "Ref" : "ProjectTag" }, { "Ref" : "EnvironmentTypeTag" }, "Public", "d"]]},
        "AlarmActions" : [ { "Ref" : "SNSTopic" } ],
        "MetricName" : "StatusCheckFailed",
        "Namespace" : "AWS/EC2",
        "Period" : "300",
        "EvaluationPeriods" : "1",
        "Threshold" : "1",
        "Statistic": "Maximum",
        "ComparisonOperator" : "GreaterThanOrEqualToThreshold",
        "Dimensions" : [ {
          "Name" : "InstanceId",
          "Value" : { "Ref" : "EC2Public1" }
        } ],
        "OKActions": [ { "Ref" : "SNSTopic" } ]
      }
    },

    "EC2Private3" : {
      "Type" : "AWS::EC2::Instance",
      "DependsOn" : [ 
        "PrivateSubnetAzD",
        "SecurityGroupForEC2"
      ],
      "Properties" : {
        "ImageId" : { "Ref" : "AmiId" },
        "SecurityGroupIds" : [ { "Ref" : "SecurityGroupForEC2" } ],
        "SubnetId" : { "Ref" : "PrivateSubnetAzD" },
        "InstanceType" : { "Ref" : "EC2InstanceType" },
        "KeyName" : { "Ref" : "KeyName" },
        "DisableApiTermination" : "false",
        "BlockDeviceMappings": [
          {
            "DeviceName" : "/dev/xvda",
            "Ebs" : {
              "VolumeSize" : "128",
              "VolumeType" : "standard",
              "DeleteOnTermination" : "true"
            }
          }
        ],
        "Tags" : [
          { "Key" : "Name", "Value" : { "Fn::Join": [ " ", [  { "Ref" : "ProjectTag" }, { "Ref" : "EnvironmentTypeTag" }, "Private", "d"]]} },
          { "Key" : "EnvironmentType", "Value" : { "Ref" : "EnvironmentTypeTag" } },
          { "Key" : "Project", "Value" : { "Ref" : "ProjectTag" } }
        ]
      }
    },
    
    "AlarmCPUEC2Private3" : {
      "Type" : "AWS::CloudWatch::Alarm",
      "DependsOn" : [ 
        "EC2Private3",
        "SNSTopic"
      ],
      "Properties" : {
        "ActionsEnabled": "true",
        "AlarmName" : { "Fn::Join": [ " ", [ "CPU", "Alarm",  { "Ref" : "ProjectTag" }, { "Ref" : "EnvironmentTypeTag" }, "Private", "d"]]},
        "AlarmDescription" : { "Fn::Join": [ " ", [ "CPU", "Alarm",  { "Ref" : "ProjectTag" }, { "Ref" : "EnvironmentTypeTag" }, "Private", "d"]]},
        "AlarmActions" : [ { "Ref" : "SNSTopic" } ],
        "MetricName" : "CPUUtilization",
        "Namespace" : "AWS/EC2",
        "Period" : "300",
        "EvaluationPeriods" : "1",
        "Threshold" : "80",
        "Statistic": "Average",
        "ComparisonOperator" : "GreaterThanOrEqualToThreshold",
        "Dimensions" : [ {
          "Name" : "InstanceId",
          "Value" : { "Ref" : "EC2Private3" }
        } ],
        "OKActions": [ { "Ref" : "SNSTopic" } ]
      }
    },

    "AlarmStatusChkEC2Private3" : {
      "Type" : "AWS::CloudWatch::Alarm",
      "DependsOn" : [ 
        "EC2Private3",
        "SNSTopic"
      ],
      "Properties" : {
        "ActionsEnabled": "true",
        "AlarmName" : { "Fn::Join": [ " ", [ "StatusChk", "Alarm",  { "Ref" : "ProjectTag" }, { "Ref" : "EnvironmentTypeTag" }, "Private", "d"]]},
        "AlarmDescription" : { "Fn::Join": [ " ", [ "StatusChk", "Alarm",  { "Ref" : "ProjectTag" }, { "Ref" : "EnvironmentTypeTag" }, "Private", "d"]]},
        "AlarmActions" : [ { "Ref" : "SNSTopic" } ],
        "MetricName" : "StatusCheckFailed",
        "Namespace" : "AWS/EC2",
        "Period" : "300",
        "EvaluationPeriods" : "1",
        "Threshold" : "1",
        "Statistic": "Maximum",
        "ComparisonOperator" : "GreaterThanOrEqualToThreshold",
        "Dimensions" : [ {
          "Name" : "InstanceId",
          "Value" : { "Ref" : "EC2Private3" }
        } ],
        "OKActions": [ { "Ref" : "SNSTopic" } ]
      }
    },

    "SNSTopic":{
      "Type" : "AWS::SNS::Topic",
      "Properties" : {
        "Subscription" : [
          {
            "Endpoint" : { "Ref" : "AlartMailAddress" },
            "Protocol" : "email"
          }
        ],
      "TopicName" : { "Fn::Join": [ "-", [ { "Ref" : "ProjectTag" }, { "Ref" : "EnvironmentTypeTag" },  "Notification"]]}
      }
    }
    
  },

  "Outputs" : {}
}